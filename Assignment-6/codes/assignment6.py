# -*- coding: utf-8 -*-
"""Assignment6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hQSpWIrquJn2VBL-OeveakECz2_NB3ig
"""

import random as rd
import matplotlib.pyplot as plt

def factorial(n):
  fact = 1
  for i in range(1, n+1):
    fact *= i
  return fact

def combination(n, r) -> float:
  comb = factorial(n)/(factorial(n-r) * factorial(r))
  return comb


sample_size = 500000
dice_side_colours = [-1, -1, -1, -1, -1, -1]
# 0 represents red colour
# 1 represents blue colour
# 2 represents green colour
i=0
while i<2:
  temp = rd.randint(0, 5)
  if(dice_side_colours[temp] == -1):
    dice_side_colours[temp] = 0
    i+=1
i=0
while i<2:
  temp = rd.randint(0, 5)
  if(dice_side_colours[temp] == -1):
    dice_side_colours[temp] = 1
    i+=1
i=0
while i<2:
  temp = rd.randint(0, 5)
  if(dice_side_colours[temp] == -1):
    dice_side_colours[temp] = 2
    i+=1

no_of_throws = 3
no_of_true_cases = 0 
pmf_sim = [0, 0, 0, 0]
cdf_sim = [0, 0, 0, 0]
for i in range(sample_size):
  count_red = 0
  for j in range(no_of_throws):
    throw = rd.randint(0, 5)
    if dice_side_colours[throw] == 0:
      count_red += 1
  pmf_sim[count_red] += 1
  if count_red >= 2:
    no_of_true_cases += 1

pmf_sim[0] /= sample_size
cdf_sim[0] = pmf_sim[0]

for i in range(1, 4):
  pmf_sim[i] /= sample_size
  cdf_sim[i] = cdf_sim[i-1] + pmf_sim[i] 

pmf_theo = [0, 0, 0, 0]
cdf_theo = [0, 0, 0, 0]
for i in range(4): 
  pmf_theo[i] = combination(3, i)*((1/3)**i)*((2/3)**(3-i))
  if i == 0:
    cdf_theo[0] = pmf_theo[0]
  else:
    cdf_theo[i] = cdf_theo[i-1] + pmf_theo[i] 

prob_sim = no_of_true_cases / sample_size
prob_theo = 0
for i in range(2, 4):
  temp = combination(3, i)*((1/3)**i)*((2/3)**(3-i))
  prob_theo += temp
error = abs(prob_theo - prob_sim)
print("Probability obtained from theoretical calculations is: {}".format(prob_theo))
print("Probability obtained from simulations is: {}".format(prob_sim))
print("Error in calculating probability is: {}".format(error))
print("As the errors are extremely small, we can conclude that both sets of results are approximately the same")

# Plotting
x_axis = [0, 1, 2, 3]
print("The following is the PMF graph of Xn")
plt.stem(x_axis,pmf_sim, markerfmt='o', use_line_collection=True, label='Simulation')
plt.stem(x_axis,pmf_theo, markerfmt='o',use_line_collection=True, label='Analysis')
plt.xlabel('$n$')
plt.ylabel('$p_{X}(n)$')
plt.xticks( x_axis)
plt.legend()
plt.grid()
plt.show()
print("The following is the CDF graph of Xn")
plt.stem(x_axis,cdf_sim, markerfmt='o', use_line_collection=True, label='Simulation')
plt.stem(x_axis,cdf_theo, markerfmt='o',use_line_collection=True, label='Analysis')
plt.xlabel('$n$')
plt.ylabel('$F_{X}(n)$')
plt.xticks( x_axis)
plt.legend()
plt.grid()
plt.show()