# -*- coding: utf-8 -*-
"""Assignment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qD9LSYJERaicRHm7YHZHfjUXbt4sQCC0
"""

import random as rd

sample_data = 500000

list_of_balls = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
i=0
while i<5:
  temp = rd.randint(0, 16)
  if(list_of_balls[temp] == -1):
    list_of_balls[temp] = 0
    i+=1
i=0
while i<8:
  temp = rd.randint(0, 16)
  if(list_of_balls[temp] == -1):
    list_of_balls[temp] = 1
    i+=1
i=0
while i<4:
  temp = rd.randint(0, 16)
  if(list_of_balls[temp] == -1):
    list_of_balls[temp] = 2
    i+=1
red_count = white_count = green_count = 0 
# 0 corresponds to red marble
# 1 corresponds to white marble
# 2 corresponds to green marble
for i in range(sample_data):
  temp = rd.randint(0, 16)
  if(list_of_balls[temp] == 0):
    red_count += 1
  elif(list_of_balls[temp] == 1):
    white_count += 1
  else:
    green_count += 1
prob_red = red_count / sample_data
prob_white = white_count / sample_data
prob_green = green_count / sample_data
print("Following results are obtained from the simulation")
print("(i) Probability that the taken out marble will be red is: {}".format(prob_red))
print("(ii) Probability that the taken out marble will be white is: {}".format(prob_white))
print("(iii) Probability that the taken out marble will not be green is: {}".format(1 - prob_green))
print()
print("Following results are obtained theoretically")
print("(i) Probability that the taken out marble will be red is: 0.294117647")
print("(ii) Probability that the taken out marble will be white is: 0.4705882353")
print("(iii) Probability that the taken out marble will not be green is: 0.764705883")
print()
print("Following are the absolute errors in calculating probabilties")
print("(i) Absolute error in calculating probability that the taken out marble will be red is: {}".format(abs(prob_red - 0.294117647)))
print("(i) Absolute error in calculating probability that the taken out marble will be white is: {}".format(abs(prob_white - 0.4705882353)))
print("(i) Absolute error in calculating probability that the taken out marble will not be green is: {}".format(abs(1 - prob_green - 0.764705883)))
print("As the errors are extremely small, we can conclude that both sets of results are approximately the same")

import math
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import bernoulli
from scipy.stats import norm
from scipy.stats import binom


#function to calculate factorial
def fact_func(a):
  ans = 1
  for x in range(1 , a + 1):
    ans = ans * x
  return ans

#function to calculate binomial coefficient
def ncr(n , r):
  ans = fact_func(n) / (fact_func(r) * fact_func(n - r))
  return ans

#function to calculate the probability 
def probab_func(n , p , q , a , b):
  sum = 0
  for x in range(a , b + 1):
    sum = sum + ( ncr(n , x) )* ( pow(p , x) ) * ( pow(q , n - x) )
  return sum

n = 6
p = 2 / 5
q = 3 / 5
print("The probability that all will bear X is: " , probab_func(n , p , q , 6 , 6))
print("The probability that not more than 2 will bear 'Y' mark is: " , probab_func(n , p , q , 4 , 6))
print("The probability that at least one ball will bear 'Y' mark is: " , probab_func(n , p , q , 0 , 5))
print("The probability that the number of balls with 'X' mark and 'Y' mark will be equal is: " , probab_func(n , p , q , 3 , 3))

#imported numpy for making binomial distribution

num_trails = 1000000
sample_space = np.random.binomial(n , p , num_trails)
print("Some number this is " , sample_space)
count = 0
for i in sample_space:
  if i == 6:
    count = count + 1

probability_check = count / num_trails
print("The probability that all will bear X is: " , probability_check)

count = 0
for i in sample_space:
  if i == 3:
    count = count + 1
probability_check = count / num_trails
print("The probability that the number of balls with 'X' mark and 'Y' mark will be equal is: " , probability_check)

count = 0
for i in sample_space:
  if i == 4 or i == 5 or i == 6:
    count = count + 1
probability_check = count / num_trails
print("The probability that not more than 2 will bear 'Y' mark is: " , probability_check)

count = 0
for i in sample_space:
  if i != 6:
    count = count + 1
probability_check = count / num_trails
print("The probability that at least one ball will bear 'Y' mark is: " , probability_check)