# -*- coding: utf-8 -*-
"""Assignment5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z1BGqmNPBEmskSA3xvUkklG-mUZZJIp9
"""

import numpy as np
import random as rd
import plotly.graph_objects as go
import matplotlib.pyplot as plt


def factorial(n):
  fact = 1
  for i in range(1, n+1):
    fact *= i
  return fact

def combination(n, r) -> float:
  comb = factorial(n)/(factorial(n-r) * factorial(r))
  return comb


prob_head = 1/2
prob_tail = 1 - prob_head
number_of_simulations = int(5e5)
count = 0
for i in range(number_of_simulations):
  no_of_heads_one = no_of_heads_two = 0
  for j in range(4):
    toss_person_one = rd.randint(0,1)
    toss_person_two = rd.randint(0,1)
    no_of_heads_one += toss_person_one
    no_of_heads_two += toss_person_two
  if no_of_heads_one == no_of_heads_two:
    count += 1

prob_equal_heads = count / number_of_simulations
theoretical_prob_equal_heads = 0
for i in range(5):
  temp = combination(4, i) * ((prob_head)**4)
  theoretical_prob_equal_heads += (temp * temp)

print("The probability obtained from theoretical calculations (correct upto three decimal places) is: {0:.3f}.".format(theoretical_prob_equal_heads))
print("The probability obtained from simulations (correct upto three decimal places) is: {0:.3f}.".format(prob_equal_heads))
error = abs((theoretical_prob_equal_heads % 0.001) - (prob_equal_heads % 0.001))
print("The error in finding probability is: {0:.3f}.".format(error))
print("As the error is extremely small, we can conclude that both sets of results are approximately the same.")

cases = ['']
x = np.arange(len(cases))
plt.bar(x + 0.00, theoretical_prob_equal_heads, color = 'skyblue', width = 0.2, label = 'Theoretical')
plt.bar(x + 0.2, prob_equal_heads, color = 'green', width = 0.2, label = 'Simulated')
plt.xlabel('Theoretical v/s Simulated')
plt.ylabel('P(X=Y) = Probability of equal heads')
plt.xticks(x  + 0.2/2,[''])


a = np.arange(0,0.30,0.001)
plt.yticks(a)
plt.ylim([0.265,0.28])
#plt.margins(0.01)
plt.grid(b = True, color ='black',
        linestyle ='-.', linewidth = 0.5,
        alpha = 0.2)

plt.legend()
plt.show()