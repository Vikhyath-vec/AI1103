# -*- coding: utf-8 -*-
"""Assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NbfB42zzg8-lmM_SC7ODWY5RatoeSMC9
"""

import random as rd
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import numpy as np

sample_data = 500000
list_of_cards = []
for i in range(1, 53):
  list_of_cards.append(i)
#1-13 corresponds to all spade cards with 1 being ace and 13 being king
#14-26 corresponds to all club cards with 14 being ace and 26 being king
#27-39 corresponds to all diamond cards with 27 being ace and 39 being king
#40-52 corresponds to all heart cards with 40 being ace and 52 being king

no_ace_count = one_ace_count = two_ace_count = 0
for i in range(sample_data):
  card_one = rd.randint(1, 52) #for choosing first card
  card_two = rd.randint(1, 52) #for choosing second card
  if card_one % 13 == 1 and card_two % 13 == 1:
    two_ace_count += 1
  elif card_one % 13 == 1 or card_two % 13 == 1:
    one_ace_count += 1
  else:
    no_ace_count += 1

prob_no_ace = no_ace_count / sample_data
prob_one_ace = one_ace_count / sample_data
prob_two_ace = two_ace_count / sample_data
#results
print('Following is the tabulation of data obtained from theoretical calculations and simulations')

fig = go.Figure(data=[go.Table(header=dict(values=['Serial Number', 'Case', 'Probability from theoretical calculations', 'Probability from simulation', 'Error in probability']),
                 cells=dict(values=[[1, 2, 3], ['P(X=0)', 'P(X=1)', 'P(X=2)'], [144/169, 24/169, 1/169], [prob_no_ace, prob_one_ace, prob_two_ace], [abs(prob_no_ace-144/169), abs(prob_one_ace-24/169), abs(prob_two_ace-1/169)]]))])
fig.show()
print('As the errors are extremely small, we can conclude that both sets of results are approximately the same.')
#graphs

cases = ["x=0", "x=1", "x=2"]
theoretical_results = [144/169, 24/169, 1/169]
simulated_results = [prob_no_ace, prob_one_ace, prob_two_ace]
x = np.arange(len(cases))
plt.bar(x + 0.00, theoretical_results, color = 'red', width = 0.30, label = 'Theoretical results')
plt.bar(x + 0.30, simulated_results, color = 'black', width = 0.30, label = 'Simulated results')
plt.xlabel('x = number of aces obtained')
plt.ylabel('P(X=x) = probabilty of obtaining x aces')
plt.xticks(x  + 0.30/2,[0, 1, 2])
plt.legend()
plt.show()